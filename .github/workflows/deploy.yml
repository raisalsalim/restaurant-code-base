name: Build, Push, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get -y install podman

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure CLI Context
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log in to ACR
      run: |
        podman login ${{ secrets.ACR_NAME }}.azurecr.io -u $(az acr credential show --name ${{ secrets.ACR_NAME }} --query username -o tsv) -p $(az acr credential show --name ${{ secrets.ACR_NAME }} --query passwords[0].value -o tsv)

    - name: Build and Push Frontend Image
      run: |
        FRONTEND_IMAGE_TAG="restaurant-frontend:$(git rev-parse --short HEAD)"
        podman build -t ${{ secrets.ACR_NAME }}.azurecr.io/$FRONTEND_IMAGE_TAG ./restaurant-menu-frontend
        podman push ${{ secrets.ACR_NAME }}.azurecr.io/$FRONTEND_IMAGE_TAG
        podman tag ${{ secrets.ACR_NAME }}.azurecr.io/$FRONTEND_IMAGE_TAG ${{ secrets.ACR_NAME }}.azurecr.io/restaurant-frontend:latest
        podman push ${{ secrets.ACR_NAME }}.azurecr.io/restaurant-frontend:latest

    - name: Build and Push Backend Image
      run: |
        BACKEND_IMAGE_TAG="restaurant-backend:$(git rev-parse --short HEAD)"
        podman build -t ${{ secrets.ACR_NAME }}.azurecr.io/$BACKEND_IMAGE_TAG ./restaurant-menu-backend
        podman push ${{ secrets.ACR_NAME }}.azurecr.io/$BACKEND_IMAGE_TAG
        podman tag ${{ secrets.ACR_NAME }}.azurecr.io/$BACKEND_IMAGE_TAG ${{ secrets.ACR_NAME }}.azurecr.io/restaurant-backend:latest
        podman push ${{ secrets.ACR_NAME }}.azurecr.io/restaurant-backend:latest

    - name: Set Up Kubernetes Context
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        export KUBECONFIG=$(pwd)/kubeconfig.yaml
        kubectl config use-context aks-backend-cluster
        kubectl get nodes

    - name: Create Namespace in AKS (if not exists)
      run: |
        kubectl create namespace restaurant || echo "Namespace 'restaurant' already exists."

    - name: Install Argo CD CLI
      run: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.5/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    - name: Port Forward Argo CD UI
      run: |
        kubectl port-forward svc/argocd-server -n argocd 8480:80 &
        echo "Argo CD is accessible at http://localhost:8480"

    - name: Create Argo CD Application for Deployment
      run: |
        argocd app create restaurant-app \
          --repo git@github.com:raisalsalim/restaurant-code-base.git \
          --path k8s \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace restaurant

    - name: Sync Application via Argo CD
      run: |
        argocd app sync restaurant-app
        echo "Application deployment initiated through Argo CD."
